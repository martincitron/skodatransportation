DECLARE store SHARED ROW;

CREATE COMPUTE MODULE getMsg_GetAndStoreMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		IF FIELDTYPE(store.msg) IS NULL THEN
			SET store.msg[1] = InputRoot.JSON.Data;
		ELSE
			DECLARE msg REFERENCE TO Environment;
			CREATE LASTCHILD OF store AS msg;
			SET msg = InputRoot.JSON.Data.msg;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

CREATE COMPUTE MODULE getMsg_GetMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		IF FIELDTYPE(store.msg) IS NULL THEN
			SET OutputRoot.JSON.Data.text = '';
		ELSE
			SET OutputRoot.JSON.Data = store.msg[>];
			SET store.msg[>] = NULL;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
